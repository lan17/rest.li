/*
   Copyright (c) 2012 LinkedIn Corp.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// use Project.evaluationDependsOn() to force configuring the target project even with org.gradle.configureondemand == true
final Project generatorProject = project.evaluationDependsOn(':generator')
final FileCollection generatorConfig = generatorProject.configurations.default + generatorProject.sourceSets.main.output

project.sourceSets.all { SourceSet sourceSet ->
  final String inputDataSchemaParentDirPath = "src${File.separatorChar}${sourceSet.name}"
  final String pegasusDirName = 'pegasus'
  final String inputDataSchemaDirPath = "${inputDataSchemaParentDirPath}${File.separatorChar}${pegasusDirName}"
  final FileTree inputDataSchemaFiles = project.fileTree(dir: inputDataSchemaDirPath, includes: ["**${File.separatorChar}*.pdsc", "**${File.separatorChar}*.pdl"])
  if (inputDataSchemaFiles.empty)
  {
    return;
  }

  final String outputDirPath = rootProject.ext.build.getDataTemplateOutDirPath(project, sourceSet)
  sourceSet.java.srcDir(outputDirPath)

  rootProject.ext.build.dataTemplateGenerateTasks[sourceSet] = project.task(sourceSet.name + 'GenerateDataTemplate', type: JavaExec) {
    main = 'com.linkedin.pegasus.generator.PegasusDataTemplateGenerator'
    classpath generatorConfig
    args outputDirPath
    args inputDataSchemaFiles
    systemProperties(['generator.resolver.path': inputDataSchemaDirPath, 'root.path': project.rootDir])
    doFirst {
      project.mkdir(outputDirPath)
    }
  }

  final Task jarTask = project.tasks[sourceSet.getTaskName('', 'jar')]
  jarTask.from(inputDataSchemaParentDirPath) {
    include "${pegasusDirName}${File.separatorChar}**${File.separatorChar}*.pdsc"
    include "${pegasusDirName}${File.separatorChar}**${File.separatorChar}*.pdl"
  }

  final Task dataTemplateCompileTask = project.task(sourceSet.name + 'CompileDataTemplate',
                                                    type: JavaCompile,
                                                    dependsOn: rootProject.ext.build.dataTemplateGenerateTasks[sourceSet]) {
    classpath = sourceSet.compileClasspath
    destinationDir = project.file(project.tasks[sourceSet.compileJavaTaskName].destinationDir.path + 'DataTemplate')
    source outputDirPath
    source sourceSet.java.srcDirs
  }
  rootProject.ext.build.dataTemplateCompileTasks[sourceSet] = dataTemplateCompileTask;

  project.tasks[sourceSet.compileJavaTaskName].dependsOn(dataTemplateCompileTask)
}


dependencies {
  compile externalDependency.jsr305
}
